buildscript {
    ext.kotlin_version = '1.1.3-2'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.1.2-3"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}


allprojects { project ->
    project.buildDir = new File(rootProject.projectDir, ".gradleTemp/" + project.name)
}

subprojects {

    apply plugin: 'java'

    repositories {
        flatDir {
            dirs ("$rootProject.projectDir/lib/pro", "$rootProject.projectDir/lib/test")
        }
    }

    sourceSets {
        test.java.srcDirs = []
        test.resources.srcDirs = []
    }

    tasks.withType(Jar) {
        destinationDir = file("$rootDir/out/jars")
    }

}


def productionModules = [ project(':dekaf-base'),
                          project(':dekaf-jdbc'),
                          project(':dekaf-main'),
                          project(':dekaf-test-db') ]

def testModules = [ project(':dekaf-base-test'),
                    project(':dekaf-jdbc-test'),
                    project(':dekaf-main-test'),
                    project(':dekaf-test-db-test'),
                    project(':ko-test-util'),
                    project(':test-basic'),
                    project(':test-connection') ]

def demoModules = [ project(':demo-on-java'),
                    project(':demo-on-kotlin') ]

def allModules = productionModules + testModules + demoModules



// JAVA PRODUCTION AND DEMO MODULES
configure ([ project(':dekaf-base'), project(':dekaf-jdbc'), project(':demo-on-java') ]) {

    sourceSets {
        main {
            java.srcDirs = ['src']
            resources.srcDirs = ['manifest','sql']
        }
    }

}


// JAVA TEST MODULES
configure ([ project(':dekaf-base-test'), project(':dekaf-jdbc-test') ]) {

    sourceSets {
        main {
            java.srcDirs = ['tests']
            resources.srcDirs = ['manifest','tests-sql']
        }
    }

}


// KOTLIN PRODUCTION AND DEMO MODULES
configure ([ project(':dekaf-main'), project(':dekaf-test-db'), project(':ko-test-util'), project(':demo-on-kotlin') ]) {

    apply plugin: 'kotlin'

    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = ['src']
            resources.srcDirs = ['sql']
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = []
            resources.srcDirs = []
        }
    }

}


// KOTLIN TEST MODULES
configure ([ project(':dekaf-main-test'), project(':dekaf-test-db-test'), project(':test-basic'), project(':test-connection') ]) {

    apply plugin: 'kotlin'

    sourceSets {
        main {
            java.srcDirs = []
            kotlin.srcDirs = ['tests']
            resources.srcDirs = ['tests-sql']
        }
        test {
            java.srcDirs = []
            kotlin.srcDirs = []
            resources.srcDirs = []
        }
    }

}




def kotlinVersion        = '1.1.3-2'
def annotationsVersion   = "15.0"

def junitPlatformVersion = "1.0.0"
def junitJupiterVersion  = "5.0.0"
def assertJVersion       = "3.8.0"
def log4jVersion         = "2.9.0"

def junitVersion         = "4.11"
def mockitoVersion       = "2.10.0"

def h2dbVersion          = "1.4.196"
def postgresVersion      = "9.4-1201-jdbc4"
def mysqlVersion         = "6.0.6"
def microsoftVersion     = "6.1.5.jre8-preview"
def jtdsVersion          = "1.2.8"


project(':dekaf-base') {

    dependencies {
        compile name: "annotations-$annotationsVersion"
    }

}

project(':dekaf-base-test') {

    dependencies {
        compile project(':dekaf-base')
        compile name: "annotations-$annotationsVersion"
        compile name: "junit-platform-commons-$junitPlatformVersion"
        compile name: "junit-platform-engine-$junitPlatformVersion"
        compile name: "junit-platform-suite-api-$junitPlatformVersion"
        compile name: "junit-platform-launcher-$junitPlatformVersion"
        compile name: "junit-jupiter-api-$junitJupiterVersion"
        compile name: "junit-jupiter-engine-$junitJupiterVersion"
        compile name: "junit-jupiter-params-$junitJupiterVersion"
        compile name: "assertj-core-$assertJVersion"
    }

}


project(':dekaf-jdbc') {

    dependencies {
        compile project(':dekaf-base')
    }

}

project(':dekaf-jdbc-test') {

    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-jdbc')
        compile name: "h2-$h2dbVersion"
        compile name: "junit-platform-commons-$junitPlatformVersion"
        compile name: "junit-platform-engine-$junitPlatformVersion"
        compile name: "junit-platform-suite-api-$junitPlatformVersion"
        compile name: "junit-platform-launcher-$junitPlatformVersion"
        compile name: "junit-jupiter-api-$junitJupiterVersion"
        compile name: "junit-jupiter-engine-$junitJupiterVersion"
        compile name: "junit-jupiter-params-$junitJupiterVersion"
        compile name: "assertj-core-$assertJVersion"
    }

}


project(':dekaf-main') {

    dependencies {
        compile project(':dekaf-base')
        compile name: "kotlin-stdlib-$kotlinVersion"
        compile name: "kotlin-stdlib-common-$kotlinVersion"
        compile name: "kotlin-stdlib-jre7-$kotlinVersion"
        compile name: "kotlin-stdlib-jre8-$kotlinVersion"
        compile name: "kotlin-reflect-$kotlinVersion"
    }

}

project(':dekaf-main-test') {

    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-main')
        compile project(':ko-test-util')
        compile name: "kotlin-stdlib-$kotlinVersion"
        compile name: "kotlin-stdlib-common-$kotlinVersion"
        compile name: "kotlin-stdlib-jre7-$kotlinVersion"
        compile name: "kotlin-stdlib-jre8-$kotlinVersion"
        compile name: "kotlin-reflect-$kotlinVersion"
        compile name: "h2-$h2dbVersion"
        compile name: "junit-platform-commons-$junitPlatformVersion"
        compile name: "junit-platform-engine-$junitPlatformVersion"
        compile name: "junit-platform-suite-api-$junitPlatformVersion"
        compile name: "junit-platform-launcher-$junitPlatformVersion"
        compile name: "junit-jupiter-api-$junitJupiterVersion"
        compile name: "junit-jupiter-engine-$junitJupiterVersion"
        compile name: "junit-jupiter-params-$junitJupiterVersion"
        compile name: "assertj-core-$assertJVersion"
    }

}


project(':dekaf-test-db') {

    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-main')
        compile name: "kotlin-stdlib-$kotlinVersion"
        compile name: "kotlin-stdlib-common-$kotlinVersion"
        compile name: "kotlin-stdlib-jre7-$kotlinVersion"
        compile name: "kotlin-stdlib-jre8-$kotlinVersion"
        compile name: "kotlin-reflect-$kotlinVersion"
    }

}

project(':dekaf-test-db-test') {

    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-main')
        compile project(':dekaf-test-db')
        compile project(':ko-test-util')
        compile name: "kotlin-stdlib-$kotlinVersion"
        compile name: "kotlin-stdlib-common-$kotlinVersion"
        compile name: "kotlin-stdlib-jre7-$kotlinVersion"
        compile name: "kotlin-stdlib-jre8-$kotlinVersion"
        compile name: "kotlin-reflect-$kotlinVersion"
        compile name: "h2-$h2dbVersion"
        compile name: "junit-platform-commons-$junitPlatformVersion"
        compile name: "junit-platform-engine-$junitPlatformVersion"
        compile name: "junit-platform-suite-api-$junitPlatformVersion"
        compile name: "junit-platform-launcher-$junitPlatformVersion"
        compile name: "junit-jupiter-api-$junitJupiterVersion"
        compile name: "junit-jupiter-engine-$junitJupiterVersion"
        compile name: "junit-jupiter-params-$junitJupiterVersion"
        compile name: "assertj-core-$assertJVersion"
    }

}


project(':ko-test-util') {

    dependencies {
        compile name: "kotlin-stdlib-$kotlinVersion"
        compile name: "kotlin-stdlib-common-$kotlinVersion"
        compile name: "kotlin-stdlib-jre7-$kotlinVersion"
        compile name: "kotlin-stdlib-jre8-$kotlinVersion"
        compile name: "kotlin-reflect-$kotlinVersion"
        compile name: "junit-platform-commons-$junitPlatformVersion"
        compile name: "junit-platform-engine-$junitPlatformVersion"
        compile name: "junit-platform-suite-api-$junitPlatformVersion"
        compile name: "junit-platform-launcher-$junitPlatformVersion"
        compile name: "junit-jupiter-api-$junitJupiterVersion"
        compile name: "junit-jupiter-engine-$junitJupiterVersion"
        compile name: "junit-jupiter-params-$junitJupiterVersion"
        compile name: "assertj-core-$assertJVersion"
        compile name: "opentest4j-1.0.0"
    }
                      
}


project(':demo-on-java') {

    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-main')
        compile name: "h2-$h2dbVersion"
    }

}


project(':demo-on-kotlin') {

    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-main')
        compile name: "h2-$h2dbVersion"
        compile name: "kotlin-stdlib-$kotlinVersion"
        compile name: "kotlin-stdlib-common-$kotlinVersion"
        compile name: "kotlin-stdlib-jre7-$kotlinVersion"
        compile name: "kotlin-stdlib-jre8-$kotlinVersion"
    }

}


project(':test-basic') {

    //apply plugin: 'org.junit.platform.gradle.plugin'

    dependencies {
        compile project(':demo-on-java')
        compile project(':demo-on-kotlin')
        compile project(':dekaf-base-test')
        compile project(':dekaf-jdbc-test')
        compile project(':dekaf-main-test')
        compile project(':ko-test-util')
        compile name: "kotlin-stdlib-$kotlinVersion"
        compile name: "kotlin-stdlib-common-$kotlinVersion"
        compile name: "kotlin-stdlib-jre7-$kotlinVersion"
        compile name: "kotlin-stdlib-jre8-$kotlinVersion"
        compile name: "kotlin-reflect-$kotlinVersion"
        compile name: "h2-$h2dbVersion"
        compile name: "junit-platform-commons-$junitPlatformVersion"
        compile name: "junit-platform-engine-$junitPlatformVersion"
        compile name: "junit-platform-suite-api-$junitPlatformVersion"
        compile name: "junit-platform-launcher-$junitPlatformVersion"
        compile name: "junit-jupiter-api-$junitJupiterVersion"
        compile name: "junit-jupiter-engine-$junitJupiterVersion"
        compile name: "junit-jupiter-params-$junitJupiterVersion"
        compile name: "assertj-core-$assertJVersion"
    }

    jar {
        manifest {
            attributes(
                    "Class-Path": configurations.compile.collect { it.getName() }.join(' '),
                    'Main-Class': 'org.jetbrains.dekaf.AllUnitTests'
            )
        }
    }

    /*
    junitPlatform {
        //platformVersion 1.0
        //logManager 'org.apache.logging.log4j.jul.LogManager'
        reportsDir file('build/reports')

        // enableStandardTestTask true
        // selectors (optional)

        filters {
            engines {
                include 'junit-jupiter'
                exclude 'junit-vintage'
            }
        }
    }
    */

}


project(':test-connection') {

    //apply plugin: 'org.junit.platform.gradle.plugin'

    dependencies {
        compile project(':dekaf-base')
        compile project(':dekaf-jdbc')
        compile project(':dekaf-main')
        compile project(':dekaf-test-db')
        compile project(':ko-test-util')
        compile name: "kotlin-stdlib-$kotlinVersion"
        compile name: "kotlin-stdlib-common-$kotlinVersion"
        compile name: "kotlin-stdlib-jre7-$kotlinVersion"
        compile name: "kotlin-stdlib-jre8-$kotlinVersion"
        compile name: "kotlin-reflect-$kotlinVersion"
        compile name: "junit-platform-commons-$junitPlatformVersion"
        compile name: "junit-platform-engine-$junitPlatformVersion"
        compile name: "junit-platform-suite-api-$junitPlatformVersion"
        compile name: "junit-platform-launcher-$junitPlatformVersion"
        compile name: "junit-jupiter-api-$junitJupiterVersion"
        compile name: "junit-jupiter-engine-$junitJupiterVersion"
        compile name: "junit-jupiter-params-$junitJupiterVersion"
        compile name: "assertj-core-$assertJVersion"
        compile name: "h2-$h2dbVersion"
    }

    /*
    junitPlatform {
        //platformVersion 1.0
        //logManager 'org.apache.logging.log4j.jul.LogManager'
        reportsDir file('build/reports')

        // enableStandardTestTask true
        // selectors (optional)

        filters {
            engines {
                include 'junit-jupiter'
                exclude 'junit-vintage'
            }
        }
    }
    */
}


task farm(type: Copy) {
    from allModules.collect { it.tasks.jar }
    from allModules.collect { it.configurations.runtime }
    into "$rootDir/farm/jars/"
}



task zipProduction(type: Zip) {
    destinationDir(file("$rootDir/farm/"))
    baseName("production")
    from productionModules.collect { it.tasks.jar }
}

task zipTests(type: Zip) {
    destinationDir(file("$rootDir/farm/"))
    baseName("tests")
    def sum = testModules + demoModules
    from sum.collect { it.tasks.jar }
}

task zipDeps(type: Zip) {
    destinationDir(file("$rootDir/farm/"))
    baseName("deps")
    from testModules.collect { it.configurations.runtime }
    def filesToExclude = project.files(allModules.collect { it.tasks.jar }).files
    exclude {
        it.file in filesToExclude
    }
}

task zipAll(dependsOn: [zipProduction, zipTests, zipDeps]) {

}





repositories {
    mavenCentral()
}

configurations {
    pro  { }
    test { }
    jdbc { }
}



dependencies {
    pro "org.jetbrains:annotations:$annotationsVersion",
        "org.jetbrains:annotations:$annotationsVersion:sources",
        "org.jetbrains:annotations:$annotationsVersion:javadoc",
        "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion",
        "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion:sources",
        "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion:javadoc",
        "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion",
        "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion:sources",
        "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion:javadoc",
        "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion",
        "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion:sources",
        "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion:javadoc",
        "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
        "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion:sources",
        "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion:javadoc"

    test "org.junit.platform:junit-platform-commons:$junitPlatformVersion",
         "org.junit.platform:junit-platform-commons:$junitPlatformVersion:sources",
         "org.junit.platform:junit-platform-commons:$junitPlatformVersion:javadoc",
         "org.junit.platform:junit-platform-engine:$junitPlatformVersion",
         "org.junit.platform:junit-platform-engine:$junitPlatformVersion:sources",
         "org.junit.platform:junit-platform-engine:$junitPlatformVersion:javadoc",
         "org.junit.platform:junit-platform-suite-api:$junitPlatformVersion",
         "org.junit.platform:junit-platform-suite-api:$junitPlatformVersion:sources",
         "org.junit.platform:junit-platform-suite-api:$junitPlatformVersion:javadoc",
         "org.junit.platform:junit-platform-launcher:$junitPlatformVersion",
         "org.junit.platform:junit-platform-launcher:$junitPlatformVersion:sources",
         "org.junit.platform:junit-platform-launcher:$junitPlatformVersion:javadoc",
         "org.junit.platform:junit-platform-console:$junitPlatformVersion",
         "org.junit.platform:junit-platform-console:$junitPlatformVersion:sources",
         "org.junit.platform:junit-platform-console:$junitPlatformVersion:javadoc",
         "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion",
         "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion:sources",
         "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion:javadoc",
         "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion",
         "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion:sources",
         "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion:javadoc",
         "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion",
         "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion:sources",
         "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion:javadoc",
         "org.assertj:assertj-core:$assertJVersion",
         "org.assertj:assertj-core:$assertJVersion:sources",
         "org.assertj:assertj-core:$assertJVersion:javadoc",
         "org.apache.logging.log4j:log4j:$log4jVersion",
         //"org.apache.logging.log4j:log4j:$log4jVersion:sources",
         //"org.apache.logging.log4j:log4j:$log4jVersion:javadoc",

         "com.h2database:h2:$h2dbVersion",
         "com.h2database:h2:$h2dbVersion:sources",
         "com.h2database:h2:$h2dbVersion:javadoc",

         "junit:junit:$junitVersion",
         "junit:junit:$junitVersion:sources",
         "junit:junit:$junitVersion:javadoc",
         "org.mockito:mockito-core:$mockitoVersion",
         "org.mockito:mockito-core:$mockitoVersion:sources",
         "org.mockito:mockito-core:$mockitoVersion:javadoc"

    jdbc "org.postgresql:postgresql:$postgresVersion",
         "org.postgresql:postgresql:$postgresVersion:sources",
         "org.postgresql:postgresql:$postgresVersion:javadoc",
         "mysql:mysql-connector-java:$mysqlVersion",
         "mysql:mysql-connector-java:$mysqlVersion:sources",  // mysql driver has no javadoc
         "com.microsoft.sqlserver:mssql-jdbc:$microsoftVersion",
         "com.microsoft.sqlserver:mssql-jdbc:$microsoftVersion:sources",
         "com.microsoft.sqlserver:mssql-jdbc:$microsoftVersion:javadoc",
         "net.sourceforge.jtds:jtds:$jtdsVersion",
         "net.sourceforge.jtds:jtds:$jtdsVersion:sources",
         "net.sourceforge.jtds:jtds:$jtdsVersion:javadoc"
}


task getLibsPro(type: Copy) {
    from configurations.pro
    into "lib/pro/"
}

task getLibsTest(type: Copy) {
    from configurations.test - configurations.pro
    into "lib/test/"
}

task getLibsJdbc(type: Copy) {
    from configurations.jdbc - configurations.pro
    into "lib/jdbc/"
}

task getLibs {
    dependsOn << getLibsPro
    dependsOn << getLibsTest
    dependsOn << getLibsJdbc
}
